(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[4],{

/***/ "./node_modules/qrcode.vue/dist/qrcode.vue.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/qrcode.vue/dist/qrcode.vue.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*!\n * qrcode.vue v1.7.0\n * A Vue component to generate QRCode.\n * Â© 2017-2019 @scopewu(https://github.com/scopewu)\n * MIT License.\n */\nvar mode = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};\n\nfunction QR8bitByte(data) {\n  this.mode = mode.MODE_8BIT_BYTE;\n  this.data = data;\n}\n\nQR8bitByte.prototype = {\n  getLength: function (buffer) {\n    return this.data.length;\n  },\n  write: function (buffer) {\n    for (var i = 0; i < this.data.length; i++) {\n      // not JIS ...\n      buffer.put(this.data.charCodeAt(i), 8);\n    }\n  }\n};\nvar _8BitByte = QR8bitByte;\n\nvar ErrorCorrectLevel = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};\n\nfunction QRRSBlock(totalCount, dataCount) {\n  this.totalCount = totalCount;\n  this.dataCount = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [// L\n// M\n// Q\n// H\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\t\t\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\t\t\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\t\t\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\nQRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n  if (rsBlock == undefined) {\n    throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n  }\n\n  var length = rsBlock.length / 3;\n  var list = new Array();\n\n  for (var i = 0; i < length; i++) {\n    var count = rsBlock[i * 3 + 0];\n    var totalCount = rsBlock[i * 3 + 1];\n    var dataCount = rsBlock[i * 3 + 2];\n\n    for (var j = 0; j < count; j++) {\n      list.push(new QRRSBlock(totalCount, dataCount));\n    }\n  }\n\n  return list;\n};\n\nQRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n  switch (errorCorrectLevel) {\n    case ErrorCorrectLevel.L:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n    case ErrorCorrectLevel.M:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n    case ErrorCorrectLevel.Q:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n    case ErrorCorrectLevel.H:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};\n\nvar RSBlock = QRRSBlock;\n\nfunction QRBitBuffer() {\n  this.buffer = new Array();\n  this.length = 0;\n}\n\nQRBitBuffer.prototype = {\n  get: function (index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  },\n  put: function (num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  },\n  getLengthInBits: function () {\n    return this.length;\n  },\n  putBit: function (bit) {\n    var bufIndex = Math.floor(this.length / 8);\n\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n\n    this.length++;\n  }\n};\nvar BitBuffer = QRBitBuffer;\n\nvar QRMath = {\n  glog: function (n) {\n    if (n < 1) {\n      throw new Error(\"glog(\" + n + \")\");\n    }\n\n    return QRMath.LOG_TABLE[n];\n  },\n  gexp: function (n) {\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return QRMath.EXP_TABLE[n];\n  },\n  EXP_TABLE: new Array(256),\n  LOG_TABLE: new Array(256)\n};\n\nfor (var i = 0; i < 8; i++) {\n  QRMath.EXP_TABLE[i] = 1 << i;\n}\n\nfor (var i = 8; i < 256; i++) {\n  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\n\nfor (var i = 0; i < 255; i++) {\n  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\n\nvar math = QRMath;\n\nfunction QRPolynomial(num, shift) {\n  if (num.length == undefined) {\n    throw new Error(num.length + \"/\" + shift);\n  }\n\n  var offset = 0;\n\n  while (offset < num.length && num[offset] == 0) {\n    offset++;\n  }\n\n  this.num = new Array(num.length - offset + shift);\n\n  for (var i = 0; i < num.length - offset; i++) {\n    this.num[i] = num[i + offset];\n  }\n}\n\nQRPolynomial.prototype = {\n  get: function (index) {\n    return this.num[index];\n  },\n  getLength: function () {\n    return this.num.length;\n  },\n  multiply: function (e) {\n    var num = new Array(this.getLength() + e.getLength() - 1);\n\n    for (var i = 0; i < this.getLength(); i++) {\n      for (var j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));\n      }\n    }\n\n    return new QRPolynomial(num, 0);\n  },\n  mod: function (e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n\n    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));\n    var num = new Array(this.getLength());\n\n    for (var i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n\n    for (var i = 0; i < e.getLength(); i++) {\n      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);\n    } // recursive call\n\n\n    return new QRPolynomial(num, 0).mod(e);\n  }\n};\nvar Polynomial = QRPolynomial;\n\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\nvar QRUtil = {\n  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n  getBCHTypeInfo: function (data) {\n    var d = data << 10;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n    }\n\n    return (data << 10 | d) ^ QRUtil.G15_MASK;\n  },\n  getBCHTypeNumber: function (data) {\n    var d = data << 12;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n    }\n\n    return data << 12 | d;\n  },\n  getBCHDigit: function (data) {\n    var digit = 0;\n\n    while (data != 0) {\n      digit++;\n      data >>>= 1;\n    }\n\n    return digit;\n  },\n  getPatternPosition: function (typeNumber) {\n    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n  },\n  getMask: function (maskPattern, i, j) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return (i + j) % 2 == 0;\n\n      case QRMaskPattern.PATTERN001:\n        return i % 2 == 0;\n\n      case QRMaskPattern.PATTERN010:\n        return j % 3 == 0;\n\n      case QRMaskPattern.PATTERN011:\n        return (i + j) % 3 == 0;\n\n      case QRMaskPattern.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n\n      case QRMaskPattern.PATTERN101:\n        return i * j % 2 + i * j % 3 == 0;\n\n      case QRMaskPattern.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 == 0;\n\n      case QRMaskPattern.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n      default:\n        throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n  },\n  getErrorCorrectPolynomial: function (errorCorrectLength) {\n    var a = new Polynomial([1], 0);\n\n    for (var i = 0; i < errorCorrectLength; i++) {\n      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));\n    }\n\n    return a;\n  },\n  getLengthInBits: function (mode$1, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n      switch (mode$1) {\n        case mode.MODE_NUMBER:\n          return 10;\n\n        case mode.MODE_ALPHA_NUM:\n          return 9;\n\n        case mode.MODE_8BIT_BYTE:\n          return 8;\n\n        case mode.MODE_KANJI:\n          return 8;\n\n        default:\n          throw new Error(\"mode:\" + mode$1);\n      }\n    } else if (type < 27) {\n      // 10 - 26\n      switch (mode$1) {\n        case mode.MODE_NUMBER:\n          return 12;\n\n        case mode.MODE_ALPHA_NUM:\n          return 11;\n\n        case mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case mode.MODE_KANJI:\n          return 10;\n\n        default:\n          throw new Error(\"mode:\" + mode$1);\n      }\n    } else if (type < 41) {\n      // 27 - 40\n      switch (mode$1) {\n        case mode.MODE_NUMBER:\n          return 14;\n\n        case mode.MODE_ALPHA_NUM:\n          return 13;\n\n        case mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case mode.MODE_KANJI:\n          return 12;\n\n        default:\n          throw new Error(\"mode:\" + mode$1);\n      }\n    } else {\n      throw new Error(\"type:\" + type);\n    }\n  },\n  getLostPoint: function (qrCode) {\n    var moduleCount = qrCode.getModuleCount();\n    var lostPoint = 0; // LEVEL1\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var dark = qrCode.isDark(row, col);\n\n        for (var r = -1; r <= 1; r++) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (var c = -1; c <= 1; c++) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrCode.isDark(row + r, col + c)) {\n              sameCount++;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    } // LEVEL2\n\n\n    for (var row = 0; row < moduleCount - 1; row++) {\n      for (var col = 0; col < moduleCount - 1; col++) {\n        var count = 0;\n        if (qrCode.isDark(row, col)) count++;\n        if (qrCode.isDark(row + 1, col)) count++;\n        if (qrCode.isDark(row, col + 1)) count++;\n        if (qrCode.isDark(row + 1, col + 1)) count++;\n\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    } // LEVEL3\n\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount - 6; col++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount - 6; row++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    } // LEVEL4\n\n\n    var darkCount = 0;\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount; row++) {\n        if (qrCode.isDark(row, col)) {\n          darkCount++;\n        }\n      }\n    }\n\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  }\n};\nvar util = QRUtil;\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n  this.typeNumber = typeNumber;\n  this.errorCorrectLevel = errorCorrectLevel;\n  this.modules = null;\n  this.moduleCount = 0;\n  this.dataCache = null;\n  this.dataList = [];\n} // for client side minification\n\n\nvar proto = QRCode.prototype;\n\nproto.addData = function (data) {\n  var newData = new _8BitByte(data);\n  this.dataList.push(newData);\n  this.dataCache = null;\n};\n\nproto.isDark = function (row, col) {\n  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n    throw new Error(row + \",\" + col);\n  }\n\n  return this.modules[row][col];\n};\n\nproto.getModuleCount = function () {\n  return this.moduleCount;\n};\n\nproto.make = function () {\n  // Calculate automatically typeNumber if provided is < 1\n  if (this.typeNumber < 1) {\n    var typeNumber = 1;\n\n    for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n      var buffer = new BitBuffer();\n      var totalDataCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i++) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      for (var i = 0; i < this.dataList.length; i++) {\n        var data = this.dataList[i];\n        buffer.put(data.mode, 4);\n        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n        data.write(buffer);\n      }\n\n      if (buffer.getLengthInBits() <= totalDataCount * 8) break;\n    }\n\n    this.typeNumber = typeNumber;\n  }\n\n  this.makeImpl(false, this.getBestMaskPattern());\n};\n\nproto.makeImpl = function (test, maskPattern) {\n  this.moduleCount = this.typeNumber * 4 + 17;\n  this.modules = new Array(this.moduleCount);\n\n  for (var row = 0; row < this.moduleCount; row++) {\n    this.modules[row] = new Array(this.moduleCount);\n\n    for (var col = 0; col < this.moduleCount; col++) {\n      this.modules[row][col] = null; //(col + row) % 3;\n    }\n  }\n\n  this.setupPositionProbePattern(0, 0);\n  this.setupPositionProbePattern(this.moduleCount - 7, 0);\n  this.setupPositionProbePattern(0, this.moduleCount - 7);\n  this.setupPositionAdjustPattern();\n  this.setupTimingPattern();\n  this.setupTypeInfo(test, maskPattern);\n\n  if (this.typeNumber >= 7) {\n    this.setupTypeNumber(test);\n  }\n\n  if (this.dataCache == null) {\n    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n  }\n\n  this.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function (row, col) {\n  for (var r = -1; r <= 7; r++) {\n    if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n    for (var c = -1; c <= 7; c++) {\n      if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n        this.modules[row + r][col + c] = true;\n      } else {\n        this.modules[row + r][col + c] = false;\n      }\n    }\n  }\n};\n\nproto.getBestMaskPattern = function () {\n  var minLostPoint = 0;\n  var pattern = 0;\n\n  for (var i = 0; i < 8; i++) {\n    this.makeImpl(true, i);\n    var lostPoint = util.getLostPoint(this);\n\n    if (i == 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint;\n      pattern = i;\n    }\n  }\n\n  return pattern;\n};\n\nproto.createMovieClip = function (target_mc, instance_name, depth) {\n  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n  var cs = 1;\n  this.make();\n\n  for (var row = 0; row < this.modules.length; row++) {\n    var y = row * cs;\n\n    for (var col = 0; col < this.modules[row].length; col++) {\n      var x = col * cs;\n      var dark = this.modules[row][col];\n\n      if (dark) {\n        qr_mc.beginFill(0, 100);\n        qr_mc.moveTo(x, y);\n        qr_mc.lineTo(x + cs, y);\n        qr_mc.lineTo(x + cs, y + cs);\n        qr_mc.lineTo(x, y + cs);\n        qr_mc.endFill();\n      }\n    }\n  }\n\n  return qr_mc;\n};\n\nproto.setupTimingPattern = function () {\n  for (var r = 8; r < this.moduleCount - 8; r++) {\n    if (this.modules[r][6] != null) {\n      continue;\n    }\n\n    this.modules[r][6] = r % 2 == 0;\n  }\n\n  for (var c = 8; c < this.moduleCount - 8; c++) {\n    if (this.modules[6][c] != null) {\n      continue;\n    }\n\n    this.modules[6][c] = c % 2 == 0;\n  }\n};\n\nproto.setupPositionAdjustPattern = function () {\n  var pos = util.getPatternPosition(this.typeNumber);\n\n  for (var i = 0; i < pos.length; i++) {\n    for (var j = 0; j < pos.length; j++) {\n      var row = pos[i];\n      var col = pos[j];\n\n      if (this.modules[row][col] != null) {\n        continue;\n      }\n\n      for (var r = -2; r <= 2; r++) {\n        for (var c = -2; c <= 2; c++) {\n          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n  }\n};\n\nproto.setupTypeNumber = function (test) {\n  var bits = util.getBCHTypeNumber(this.typeNumber);\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n  }\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n  }\n};\n\nproto.setupTypeInfo = function (test, maskPattern) {\n  var data = this.errorCorrectLevel << 3 | maskPattern;\n  var bits = util.getBCHTypeInfo(data); // vertical\t\t\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 6) {\n      this.modules[i][8] = mod;\n    } else if (i < 8) {\n      this.modules[i + 1][8] = mod;\n    } else {\n      this.modules[this.moduleCount - 15 + i][8] = mod;\n    }\n  } // horizontal\n\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 8) {\n      this.modules[8][this.moduleCount - i - 1] = mod;\n    } else if (i < 9) {\n      this.modules[8][15 - i - 1 + 1] = mod;\n    } else {\n      this.modules[8][15 - i - 1] = mod;\n    }\n  } // fixed module\n\n\n  this.modules[this.moduleCount - 8][8] = !test;\n};\n\nproto.mapData = function (data, maskPattern) {\n  var inc = -1;\n  var row = this.moduleCount - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n\n  for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n    if (col == 6) col--;\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (this.modules[row][col - c] == null) {\n          var dark = false;\n\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n          }\n\n          var mask = util.getMask(maskPattern, row, col - c);\n\n          if (mask) {\n            dark = !dark;\n          }\n\n          this.modules[row][col - c] = dark;\n          bitIndex--;\n\n          if (bitIndex == -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n\n      row += inc;\n\n      if (row < 0 || this.moduleCount <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n  var buffer = new BitBuffer();\n\n  for (var i = 0; i < dataList.length; i++) {\n    var data = dataList[i];\n    buffer.put(data.mode, 4);\n    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n    data.write(buffer);\n  } // calc num max data.\n\n\n  var totalDataCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalDataCount += rsBlocks[i].dataCount;\n  }\n\n  if (buffer.getLengthInBits() > totalDataCount * 8) {\n    throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n  } // end code\n\n\n  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4);\n  } // padding\n\n\n  while (buffer.getLengthInBits() % 8 != 0) {\n    buffer.putBit(false);\n  } // padding\n\n\n  while (true) {\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD0, 8);\n\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD1, 8);\n  }\n\n  return QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function (buffer, rsBlocks) {\n  var offset = 0;\n  var maxDcCount = 0;\n  var maxEcCount = 0;\n  var dcdata = new Array(rsBlocks.length);\n  var ecdata = new Array(rsBlocks.length);\n\n  for (var r = 0; r < rsBlocks.length; r++) {\n    var dcCount = rsBlocks[r].dataCount;\n    var ecCount = rsBlocks[r].totalCount - dcCount;\n    maxDcCount = Math.max(maxDcCount, dcCount);\n    maxEcCount = Math.max(maxEcCount, ecCount);\n    dcdata[r] = new Array(dcCount);\n\n    for (var i = 0; i < dcdata[r].length; i++) {\n      dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n    }\n\n    offset += dcCount;\n    var rsPoly = util.getErrorCorrectPolynomial(ecCount);\n    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n    var modPoly = rawPoly.mod(rsPoly);\n    ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n    for (var i = 0; i < ecdata[r].length; i++) {\n      var modIndex = i + modPoly.getLength() - ecdata[r].length;\n      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n    }\n  }\n\n  var totalCodeCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalCodeCount += rsBlocks[i].totalCount;\n  }\n\n  var data = new Array(totalCodeCount);\n  var index = 0;\n\n  for (var i = 0; i < maxDcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < dcdata[r].length) {\n        data[index++] = dcdata[r][i];\n      }\n    }\n  }\n\n  for (var i = 0; i < maxEcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < ecdata[r].length) {\n        data[index++] = ecdata[r][i];\n      }\n    }\n  }\n\n  return data;\n};\n\nvar QRCode_1 = QRCode;\n\n/**\n * Encode UTF16 to UTF8.\n * See: http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n * @param str {string}\n * @returns {string}\n */\n\nfunction toUTF8String(str) {\n  var utf8Str = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charCode = str.charCodeAt(i);\n\n    if (charCode < 0x0080) {\n      utf8Str += String.fromCharCode(charCode);\n    } else if (charCode < 0x0800) {\n      utf8Str += String.fromCharCode(0xc0 | charCode >> 6);\n      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);\n    } else if (charCode < 0xd800 || charCode >= 0xe000) {\n      utf8Str += String.fromCharCode(0xe0 | charCode >> 12);\n      utf8Str += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);\n      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);\n    } else {\n      // surrogate pair\n      i++; // UTF-16 encodes 0x10000-0x10FFFF by\n      // subtracting 0x10000 and splitting the\n      // 20 bits of 0x0-0xFFFFF into two halves\n\n      charCode = 0x10000 + ((charCode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      utf8Str += String.fromCharCode(0xf0 | charCode >> 18);\n      utf8Str += String.fromCharCode(0x80 | charCode >> 12 & 0x3f);\n      utf8Str += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);\n      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);\n    }\n  }\n\n  return utf8Str;\n}\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      } // end of row, clean up or skip\n\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return;\n        }\n\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          // Otherwise finish the current line.\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join('');\n} // @vue/component\n\n\nvar QrcodeVue = {\n  props: {\n    value: {\n      type: String,\n      required: true,\n      default: ''\n    },\n    className: {\n      type: String,\n      default: ''\n    },\n    size: {\n      type: [Number, String],\n      default: 100,\n      validator: function validator(s) {\n        return isNaN(Number(s)) !== true;\n      }\n    },\n    level: {\n      type: String,\n      default: 'L',\n      validator: function validator(l) {\n        return ['L', 'Q', 'M', 'H'].indexOf(l) > -1;\n      }\n    },\n    background: {\n      type: String,\n      default: '#fff'\n    },\n    foreground: {\n      type: String,\n      default: '#000'\n    },\n    renderAs: {\n      type: String,\n      required: false,\n      default: 'canvas',\n      validator: function validator(as) {\n        return ['canvas', 'svg'].indexOf(as) > -1;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      numCells: 0,\n      fgPath: ''\n    };\n  },\n  updated: function updated() {\n    this.render();\n  },\n  mounted: function mounted() {\n    this.render();\n  },\n  methods: {\n    render: function render() {\n      var value = this.value,\n          size = this.size,\n          level = this.level,\n          background = this.background,\n          foreground = this.foreground,\n          renderAs = this.renderAs;\n\n      var _size = size >>> 0; // size to number\n      // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrCode = new QRCode_1(-1, ErrorCorrectLevel[level]);\n      qrCode.addData(toUTF8String(value));\n      qrCode.make();\n      var cells = qrCode.modules;\n      var tileW = _size / cells.length;\n      var tileH = _size / cells.length;\n      var scale = window.devicePixelRatio || 1;\n\n      if (renderAs === 'svg') {\n        this.numCells = cells.length; // Drawing strategy: instead of a rect per module, we're going to create a\n        // single path for the dark modules and layer that on top of a light rect,\n        // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n        // way faster than DOM ops.\n        // For level 1, 441 nodes -> 2\n        // For level 40, 31329 -> 2\n\n        this.fgPath = generatePath(cells);\n      } else {\n        var canvas = this.$refs['qrcode-vue'];\n        var ctx = canvas.getContext('2d');\n        canvas.height = canvas.width = _size * scale;\n        ctx.scale(scale, scale);\n        cells.forEach(function (row, rdx) {\n          row.forEach(function (cell, cdx) {\n            ctx.fillStyle = cell ? foreground : background;\n            var w = Math.ceil((cdx + 1) * tileW) - Math.floor(cdx * tileW);\n            var h = Math.ceil((rdx + 1) * tileH) - Math.floor(rdx * tileH);\n            ctx.fillRect(Math.round(cdx * tileW), Math.round(rdx * tileH), w, h);\n          });\n        });\n      }\n    }\n  },\n  render: function render(createElement) {\n    var className = this.className,\n        value = this.value,\n        level = this.level,\n        background = this.background,\n        foreground = this.foreground,\n        size = this.size,\n        renderAs = this.renderAs,\n        numCells = this.numCells,\n        fgPath = this.fgPath;\n    return createElement('div', {\n      class: this.class || className,\n      attrs: {\n        value: value,\n        level: level,\n        background: background,\n        foreground: foreground\n      }\n    }, [renderAs === 'svg' ? createElement('svg', {\n      attrs: {\n        height: size,\n        width: size,\n        shapeRendering: 'crispEdges',\n        viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n      },\n      style: {\n        width: size + 'px',\n        height: size + 'px'\n      }\n    }, [createElement('path', {\n      attrs: {\n        fill: background,\n        d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\")\n      }\n    }), createElement('path', {\n      attrs: {\n        fill: foreground,\n        d: fgPath\n      }\n    })]) : createElement('canvas', {\n      attrs: {\n        height: size,\n        width: size\n      },\n      style: {\n        width: size + 'px',\n        height: size + 'px'\n      },\n      ref: 'qrcode-vue'\n    }, [])]);\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (QrcodeVue);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXJjb2RlLnZ1ZS9kaXN0L3FyY29kZS52dWUuZXNtLmpzP2Q3YjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsV0FBVztBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLGVBQWUsT0FBTztBQUN0QjtBQUNBOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIseUJBQXlCO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLG1CQUFtQixzQkFBc0I7QUFDekMscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7O0FBRUEsbUJBQW1CLG1CQUFtQjtBQUN0QztBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLG1CQUFtQix3QkFBd0I7QUFDM0M7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esc0JBQXNCOztBQUV0QixxQkFBcUIsbUJBQW1CO0FBQ3hDLHVCQUF1QixtQkFBbUI7QUFDMUM7QUFDQTs7QUFFQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0wscUJBQXFCLHVCQUF1QjtBQUM1Qyx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOzs7QUFHTCxxQkFBcUIsbUJBQW1CO0FBQ3hDLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsbUJBQW1CO0FBQ3hDLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOzs7QUFHTDs7QUFFQSxxQkFBcUIsbUJBQW1CO0FBQ3hDLHVCQUF1QixtQkFBbUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixxQkFBcUI7QUFDMUM7QUFDQTs7QUFFQSxxQkFBcUIsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQix3QkFBd0I7QUFDM0M7O0FBRUEscUJBQXFCLHdCQUF3QjtBQUM3QyxvQ0FBb0M7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7O0FBRUEsb0JBQW9CLFFBQVE7QUFDNUI7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsMkJBQTJCO0FBQzlDOztBQUVBLHFCQUFxQixnQ0FBZ0M7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLDBCQUEwQjtBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsMEJBQTBCO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFFBQVE7QUFDOUIsd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDOztBQUV2QyxpQkFBaUIsUUFBUTtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSCxpQkFBaUIsUUFBUTtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLFNBQVM7QUFDL0M7O0FBRUE7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7O0FBRUEsaUJBQWlCLHFCQUFxQjtBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixxQkFBcUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlCQUFpQixxQkFBcUI7QUFDdEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixnQkFBZ0I7QUFDakMsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixnQkFBZ0I7QUFDakMsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixnQkFBZ0I7QUFDakM7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7O0FBR1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRWUsd0VBQVMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9xcmNvZGUudnVlL2Rpc3QvcXJjb2RlLnZ1ZS5lc20uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHFyY29kZS52dWUgdjEuNy4wXG4gKiBBIFZ1ZSBjb21wb25lbnQgdG8gZ2VuZXJhdGUgUVJDb2RlLlxuICogwqkgMjAxNy0yMDE5IEBzY29wZXd1KGh0dHBzOi8vZ2l0aHViLmNvbS9zY29wZXd1KVxuICogTUlUIExpY2Vuc2UuXG4gKi9cbnZhciBtb2RlID0ge1xuICBNT0RFX05VTUJFUjogMSA8PCAwLFxuICBNT0RFX0FMUEhBX05VTTogMSA8PCAxLFxuICBNT0RFXzhCSVRfQllURTogMSA8PCAyLFxuICBNT0RFX0tBTkpJOiAxIDw8IDNcbn07XG5cbmZ1bmN0aW9uIFFSOGJpdEJ5dGUoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBtb2RlLk1PREVfOEJJVF9CWVRFO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG5RUjhiaXRCeXRlLnByb3RvdHlwZSA9IHtcbiAgZ2V0TGVuZ3RoOiBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGg7XG4gIH0sXG4gIHdyaXRlOiBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIG5vdCBKSVMgLi4uXG4gICAgICBidWZmZXIucHV0KHRoaXMuZGF0YS5jaGFyQ29kZUF0KGkpLCA4KTtcbiAgICB9XG4gIH1cbn07XG52YXIgXzhCaXRCeXRlID0gUVI4Yml0Qnl0ZTtcblxudmFyIEVycm9yQ29ycmVjdExldmVsID0ge1xuICBMOiAxLFxuICBNOiAwLFxuICBROiAzLFxuICBIOiAyXG59O1xuXG5mdW5jdGlvbiBRUlJTQmxvY2sodG90YWxDb3VudCwgZGF0YUNvdW50KSB7XG4gIHRoaXMudG90YWxDb3VudCA9IHRvdGFsQ291bnQ7XG4gIHRoaXMuZGF0YUNvdW50ID0gZGF0YUNvdW50O1xufVxuXG5RUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEUgPSBbLy8gTFxuLy8gTVxuLy8gUVxuLy8gSFxuLy8gMVxuWzEsIDI2LCAxOV0sIFsxLCAyNiwgMTZdLCBbMSwgMjYsIDEzXSwgWzEsIDI2LCA5XSwgLy8gMlxuWzEsIDQ0LCAzNF0sIFsxLCA0NCwgMjhdLCBbMSwgNDQsIDIyXSwgWzEsIDQ0LCAxNl0sIC8vIDNcblsxLCA3MCwgNTVdLCBbMSwgNzAsIDQ0XSwgWzIsIDM1LCAxN10sIFsyLCAzNSwgMTNdLCAvLyA0XHRcdFxuWzEsIDEwMCwgODBdLCBbMiwgNTAsIDMyXSwgWzIsIDUwLCAyNF0sIFs0LCAyNSwgOV0sIC8vIDVcblsxLCAxMzQsIDEwOF0sIFsyLCA2NywgNDNdLCBbMiwgMzMsIDE1LCAyLCAzNCwgMTZdLCBbMiwgMzMsIDExLCAyLCAzNCwgMTJdLCAvLyA2XG5bMiwgODYsIDY4XSwgWzQsIDQzLCAyN10sIFs0LCA0MywgMTldLCBbNCwgNDMsIDE1XSwgLy8gN1x0XHRcblsyLCA5OCwgNzhdLCBbNCwgNDksIDMxXSwgWzIsIDMyLCAxNCwgNCwgMzMsIDE1XSwgWzQsIDM5LCAxMywgMSwgNDAsIDE0XSwgLy8gOFxuWzIsIDEyMSwgOTddLCBbMiwgNjAsIDM4LCAyLCA2MSwgMzldLCBbNCwgNDAsIDE4LCAyLCA0MSwgMTldLCBbNCwgNDAsIDE0LCAyLCA0MSwgMTVdLCAvLyA5XG5bMiwgMTQ2LCAxMTZdLCBbMywgNTgsIDM2LCAyLCA1OSwgMzddLCBbNCwgMzYsIDE2LCA0LCAzNywgMTddLCBbNCwgMzYsIDEyLCA0LCAzNywgMTNdLCAvLyAxMFx0XHRcblsyLCA4NiwgNjgsIDIsIDg3LCA2OV0sIFs0LCA2OSwgNDMsIDEsIDcwLCA0NF0sIFs2LCA0MywgMTksIDIsIDQ0LCAyMF0sIFs2LCA0MywgMTUsIDIsIDQ0LCAxNl0sIC8vIDExXG5bNCwgMTAxLCA4MV0sIFsxLCA4MCwgNTAsIDQsIDgxLCA1MV0sIFs0LCA1MCwgMjIsIDQsIDUxLCAyM10sIFszLCAzNiwgMTIsIDgsIDM3LCAxM10sIC8vIDEyXG5bMiwgMTE2LCA5MiwgMiwgMTE3LCA5M10sIFs2LCA1OCwgMzYsIDIsIDU5LCAzN10sIFs0LCA0NiwgMjAsIDYsIDQ3LCAyMV0sIFs3LCA0MiwgMTQsIDQsIDQzLCAxNV0sIC8vIDEzXG5bNCwgMTMzLCAxMDddLCBbOCwgNTksIDM3LCAxLCA2MCwgMzhdLCBbOCwgNDQsIDIwLCA0LCA0NSwgMjFdLCBbMTIsIDMzLCAxMSwgNCwgMzQsIDEyXSwgLy8gMTRcblszLCAxNDUsIDExNSwgMSwgMTQ2LCAxMTZdLCBbNCwgNjQsIDQwLCA1LCA2NSwgNDFdLCBbMTEsIDM2LCAxNiwgNSwgMzcsIDE3XSwgWzExLCAzNiwgMTIsIDUsIDM3LCAxM10sIC8vIDE1XG5bNSwgMTA5LCA4NywgMSwgMTEwLCA4OF0sIFs1LCA2NSwgNDEsIDUsIDY2LCA0Ml0sIFs1LCA1NCwgMjQsIDcsIDU1LCAyNV0sIFsxMSwgMzYsIDEyXSwgLy8gMTZcbls1LCAxMjIsIDk4LCAxLCAxMjMsIDk5XSwgWzcsIDczLCA0NSwgMywgNzQsIDQ2XSwgWzE1LCA0MywgMTksIDIsIDQ0LCAyMF0sIFszLCA0NSwgMTUsIDEzLCA0NiwgMTZdLCAvLyAxN1xuWzEsIDEzNSwgMTA3LCA1LCAxMzYsIDEwOF0sIFsxMCwgNzQsIDQ2LCAxLCA3NSwgNDddLCBbMSwgNTAsIDIyLCAxNSwgNTEsIDIzXSwgWzIsIDQyLCAxNCwgMTcsIDQzLCAxNV0sIC8vIDE4XG5bNSwgMTUwLCAxMjAsIDEsIDE1MSwgMTIxXSwgWzksIDY5LCA0MywgNCwgNzAsIDQ0XSwgWzE3LCA1MCwgMjIsIDEsIDUxLCAyM10sIFsyLCA0MiwgMTQsIDE5LCA0MywgMTVdLCAvLyAxOVxuWzMsIDE0MSwgMTEzLCA0LCAxNDIsIDExNF0sIFszLCA3MCwgNDQsIDExLCA3MSwgNDVdLCBbMTcsIDQ3LCAyMSwgNCwgNDgsIDIyXSwgWzksIDM5LCAxMywgMTYsIDQwLCAxNF0sIC8vIDIwXG5bMywgMTM1LCAxMDcsIDUsIDEzNiwgMTA4XSwgWzMsIDY3LCA0MSwgMTMsIDY4LCA0Ml0sIFsxNSwgNTQsIDI0LCA1LCA1NSwgMjVdLCBbMTUsIDQzLCAxNSwgMTAsIDQ0LCAxNl0sIC8vIDIxXG5bNCwgMTQ0LCAxMTYsIDQsIDE0NSwgMTE3XSwgWzE3LCA2OCwgNDJdLCBbMTcsIDUwLCAyMiwgNiwgNTEsIDIzXSwgWzE5LCA0NiwgMTYsIDYsIDQ3LCAxN10sIC8vIDIyXG5bMiwgMTM5LCAxMTEsIDcsIDE0MCwgMTEyXSwgWzE3LCA3NCwgNDZdLCBbNywgNTQsIDI0LCAxNiwgNTUsIDI1XSwgWzM0LCAzNywgMTNdLCAvLyAyM1xuWzQsIDE1MSwgMTIxLCA1LCAxNTIsIDEyMl0sIFs0LCA3NSwgNDcsIDE0LCA3NiwgNDhdLCBbMTEsIDU0LCAyNCwgMTQsIDU1LCAyNV0sIFsxNiwgNDUsIDE1LCAxNCwgNDYsIDE2XSwgLy8gMjRcbls2LCAxNDcsIDExNywgNCwgMTQ4LCAxMThdLCBbNiwgNzMsIDQ1LCAxNCwgNzQsIDQ2XSwgWzExLCA1NCwgMjQsIDE2LCA1NSwgMjVdLCBbMzAsIDQ2LCAxNiwgMiwgNDcsIDE3XSwgLy8gMjVcbls4LCAxMzIsIDEwNiwgNCwgMTMzLCAxMDddLCBbOCwgNzUsIDQ3LCAxMywgNzYsIDQ4XSwgWzcsIDU0LCAyNCwgMjIsIDU1LCAyNV0sIFsyMiwgNDUsIDE1LCAxMywgNDYsIDE2XSwgLy8gMjZcblsxMCwgMTQyLCAxMTQsIDIsIDE0MywgMTE1XSwgWzE5LCA3NCwgNDYsIDQsIDc1LCA0N10sIFsyOCwgNTAsIDIyLCA2LCA1MSwgMjNdLCBbMzMsIDQ2LCAxNiwgNCwgNDcsIDE3XSwgLy8gMjdcbls4LCAxNTIsIDEyMiwgNCwgMTUzLCAxMjNdLCBbMjIsIDczLCA0NSwgMywgNzQsIDQ2XSwgWzgsIDUzLCAyMywgMjYsIDU0LCAyNF0sIFsxMiwgNDUsIDE1LCAyOCwgNDYsIDE2XSwgLy8gMjhcblszLCAxNDcsIDExNywgMTAsIDE0OCwgMTE4XSwgWzMsIDczLCA0NSwgMjMsIDc0LCA0Nl0sIFs0LCA1NCwgMjQsIDMxLCA1NSwgMjVdLCBbMTEsIDQ1LCAxNSwgMzEsIDQ2LCAxNl0sIC8vIDI5XG5bNywgMTQ2LCAxMTYsIDcsIDE0NywgMTE3XSwgWzIxLCA3MywgNDUsIDcsIDc0LCA0Nl0sIFsxLCA1MywgMjMsIDM3LCA1NCwgMjRdLCBbMTksIDQ1LCAxNSwgMjYsIDQ2LCAxNl0sIC8vIDMwXG5bNSwgMTQ1LCAxMTUsIDEwLCAxNDYsIDExNl0sIFsxOSwgNzUsIDQ3LCAxMCwgNzYsIDQ4XSwgWzE1LCA1NCwgMjQsIDI1LCA1NSwgMjVdLCBbMjMsIDQ1LCAxNSwgMjUsIDQ2LCAxNl0sIC8vIDMxXG5bMTMsIDE0NSwgMTE1LCAzLCAxNDYsIDExNl0sIFsyLCA3NCwgNDYsIDI5LCA3NSwgNDddLCBbNDIsIDU0LCAyNCwgMSwgNTUsIDI1XSwgWzIzLCA0NSwgMTUsIDI4LCA0NiwgMTZdLCAvLyAzMlxuWzE3LCAxNDUsIDExNV0sIFsxMCwgNzQsIDQ2LCAyMywgNzUsIDQ3XSwgWzEwLCA1NCwgMjQsIDM1LCA1NSwgMjVdLCBbMTksIDQ1LCAxNSwgMzUsIDQ2LCAxNl0sIC8vIDMzXG5bMTcsIDE0NSwgMTE1LCAxLCAxNDYsIDExNl0sIFsxNCwgNzQsIDQ2LCAyMSwgNzUsIDQ3XSwgWzI5LCA1NCwgMjQsIDE5LCA1NSwgMjVdLCBbMTEsIDQ1LCAxNSwgNDYsIDQ2LCAxNl0sIC8vIDM0XG5bMTMsIDE0NSwgMTE1LCA2LCAxNDYsIDExNl0sIFsxNCwgNzQsIDQ2LCAyMywgNzUsIDQ3XSwgWzQ0LCA1NCwgMjQsIDcsIDU1LCAyNV0sIFs1OSwgNDYsIDE2LCAxLCA0NywgMTddLCAvLyAzNVxuWzEyLCAxNTEsIDEyMSwgNywgMTUyLCAxMjJdLCBbMTIsIDc1LCA0NywgMjYsIDc2LCA0OF0sIFszOSwgNTQsIDI0LCAxNCwgNTUsIDI1XSwgWzIyLCA0NSwgMTUsIDQxLCA0NiwgMTZdLCAvLyAzNlxuWzYsIDE1MSwgMTIxLCAxNCwgMTUyLCAxMjJdLCBbNiwgNzUsIDQ3LCAzNCwgNzYsIDQ4XSwgWzQ2LCA1NCwgMjQsIDEwLCA1NSwgMjVdLCBbMiwgNDUsIDE1LCA2NCwgNDYsIDE2XSwgLy8gMzdcblsxNywgMTUyLCAxMjIsIDQsIDE1MywgMTIzXSwgWzI5LCA3NCwgNDYsIDE0LCA3NSwgNDddLCBbNDksIDU0LCAyNCwgMTAsIDU1LCAyNV0sIFsyNCwgNDUsIDE1LCA0NiwgNDYsIDE2XSwgLy8gMzhcbls0LCAxNTIsIDEyMiwgMTgsIDE1MywgMTIzXSwgWzEzLCA3NCwgNDYsIDMyLCA3NSwgNDddLCBbNDgsIDU0LCAyNCwgMTQsIDU1LCAyNV0sIFs0MiwgNDUsIDE1LCAzMiwgNDYsIDE2XSwgLy8gMzlcblsyMCwgMTQ3LCAxMTcsIDQsIDE0OCwgMTE4XSwgWzQwLCA3NSwgNDcsIDcsIDc2LCA0OF0sIFs0MywgNTQsIDI0LCAyMiwgNTUsIDI1XSwgWzEwLCA0NSwgMTUsIDY3LCA0NiwgMTZdLCAvLyA0MFxuWzE5LCAxNDgsIDExOCwgNiwgMTQ5LCAxMTldLCBbMTgsIDc1LCA0NywgMzEsIDc2LCA0OF0sIFszNCwgNTQsIDI0LCAzNCwgNTUsIDI1XSwgWzIwLCA0NSwgMTUsIDYxLCA0NiwgMTZdXTtcblxuUVJSU0Jsb2NrLmdldFJTQmxvY2tzID0gZnVuY3Rpb24gKHR5cGVOdW1iZXIsIGVycm9yQ29ycmVjdExldmVsKSB7XG4gIHZhciByc0Jsb2NrID0gUVJSU0Jsb2NrLmdldFJzQmxvY2tUYWJsZSh0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCk7XG5cbiAgaWYgKHJzQmxvY2sgPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHJzIGJsb2NrIEAgdHlwZU51bWJlcjpcIiArIHR5cGVOdW1iZXIgKyBcIi9lcnJvckNvcnJlY3RMZXZlbDpcIiArIGVycm9yQ29ycmVjdExldmVsKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSByc0Jsb2NrLmxlbmd0aCAvIDM7XG4gIHZhciBsaXN0ID0gbmV3IEFycmF5KCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBjb3VudCA9IHJzQmxvY2tbaSAqIDMgKyAwXTtcbiAgICB2YXIgdG90YWxDb3VudCA9IHJzQmxvY2tbaSAqIDMgKyAxXTtcbiAgICB2YXIgZGF0YUNvdW50ID0gcnNCbG9ja1tpICogMyArIDJdO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICBsaXN0LnB1c2gobmV3IFFSUlNCbG9jayh0b3RhbENvdW50LCBkYXRhQ291bnQpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGlzdDtcbn07XG5cblFSUlNCbG9jay5nZXRSc0Jsb2NrVGFibGUgPSBmdW5jdGlvbiAodHlwZU51bWJlciwgZXJyb3JDb3JyZWN0TGV2ZWwpIHtcbiAgc3dpdGNoIChlcnJvckNvcnJlY3RMZXZlbCkge1xuICAgIGNhc2UgRXJyb3JDb3JyZWN0TGV2ZWwuTDpcbiAgICAgIHJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyAwXTtcblxuICAgIGNhc2UgRXJyb3JDb3JyZWN0TGV2ZWwuTTpcbiAgICAgIHJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyAxXTtcblxuICAgIGNhc2UgRXJyb3JDb3JyZWN0TGV2ZWwuUTpcbiAgICAgIHJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyAyXTtcblxuICAgIGNhc2UgRXJyb3JDb3JyZWN0TGV2ZWwuSDpcbiAgICAgIHJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyAzXTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG52YXIgUlNCbG9jayA9IFFSUlNCbG9jaztcblxuZnVuY3Rpb24gUVJCaXRCdWZmZXIoKSB7XG4gIHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbn1cblxuUVJCaXRCdWZmZXIucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KTtcbiAgICByZXR1cm4gKHRoaXMuYnVmZmVyW2J1ZkluZGV4XSA+Pj4gNyAtIGluZGV4ICUgOCAmIDEpID09IDE7XG4gIH0sXG4gIHB1dDogZnVuY3Rpb24gKG51bSwgbGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wdXRCaXQoKG51bSA+Pj4gbGVuZ3RoIC0gaSAtIDEgJiAxKSA9PSAxKTtcbiAgICB9XG4gIH0sXG4gIGdldExlbmd0aEluQml0czogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgfSxcbiAgcHV0Qml0OiBmdW5jdGlvbiAoYml0KSB7XG4gICAgdmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmxlbmd0aCAvIDgpO1xuXG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8PSBidWZJbmRleCkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaCgwKTtcbiAgICB9XG5cbiAgICBpZiAoYml0KSB7XG4gICAgICB0aGlzLmJ1ZmZlcltidWZJbmRleF0gfD0gMHg4MCA+Pj4gdGhpcy5sZW5ndGggJSA4O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoKys7XG4gIH1cbn07XG52YXIgQml0QnVmZmVyID0gUVJCaXRCdWZmZXI7XG5cbnZhciBRUk1hdGggPSB7XG4gIGdsb2c6IGZ1bmN0aW9uIChuKSB7XG4gICAgaWYgKG4gPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnbG9nKFwiICsgbiArIFwiKVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUVJNYXRoLkxPR19UQUJMRVtuXTtcbiAgfSxcbiAgZ2V4cDogZnVuY3Rpb24gKG4pIHtcbiAgICB3aGlsZSAobiA8IDApIHtcbiAgICAgIG4gKz0gMjU1O1xuICAgIH1cblxuICAgIHdoaWxlIChuID49IDI1Nikge1xuICAgICAgbiAtPSAyNTU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFFSTWF0aC5FWFBfVEFCTEVbbl07XG4gIH0sXG4gIEVYUF9UQUJMRTogbmV3IEFycmF5KDI1NiksXG4gIExPR19UQUJMRTogbmV3IEFycmF5KDI1Nilcbn07XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gIFFSTWF0aC5FWFBfVEFCTEVbaV0gPSAxIDw8IGk7XG59XG5cbmZvciAodmFyIGkgPSA4OyBpIDwgMjU2OyBpKyspIHtcbiAgUVJNYXRoLkVYUF9UQUJMRVtpXSA9IFFSTWF0aC5FWFBfVEFCTEVbaSAtIDRdIF4gUVJNYXRoLkVYUF9UQUJMRVtpIC0gNV0gXiBRUk1hdGguRVhQX1RBQkxFW2kgLSA2XSBeIFFSTWF0aC5FWFBfVEFCTEVbaSAtIDhdO1xufVxuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG4gIFFSTWF0aC5MT0dfVEFCTEVbUVJNYXRoLkVYUF9UQUJMRVtpXV0gPSBpO1xufVxuXG52YXIgbWF0aCA9IFFSTWF0aDtcblxuZnVuY3Rpb24gUVJQb2x5bm9taWFsKG51bSwgc2hpZnQpIHtcbiAgaWYgKG51bS5sZW5ndGggPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG51bS5sZW5ndGggKyBcIi9cIiArIHNoaWZ0KTtcbiAgfVxuXG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIHdoaWxlIChvZmZzZXQgPCBudW0ubGVuZ3RoICYmIG51bVtvZmZzZXRdID09IDApIHtcbiAgICBvZmZzZXQrKztcbiAgfVxuXG4gIHRoaXMubnVtID0gbmV3IEFycmF5KG51bS5sZW5ndGggLSBvZmZzZXQgKyBzaGlmdCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoIC0gb2Zmc2V0OyBpKyspIHtcbiAgICB0aGlzLm51bVtpXSA9IG51bVtpICsgb2Zmc2V0XTtcbiAgfVxufVxuXG5RUlBvbHlub21pYWwucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLm51bVtpbmRleF07XG4gIH0sXG4gIGdldExlbmd0aDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm51bS5sZW5ndGg7XG4gIH0sXG4gIG11bHRpcGx5OiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBudW0gPSBuZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSArIGUuZ2V0TGVuZ3RoKCkgLSAxKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5nZXRMZW5ndGgoKTsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGUuZ2V0TGVuZ3RoKCk7IGorKykge1xuICAgICAgICBudW1baSArIGpdIF49IG1hdGguZ2V4cChtYXRoLmdsb2codGhpcy5nZXQoaSkpICsgbWF0aC5nbG9nKGUuZ2V0KGopKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBRUlBvbHlub21pYWwobnVtLCAwKTtcbiAgfSxcbiAgbW9kOiBmdW5jdGlvbiAoZSkge1xuICAgIGlmICh0aGlzLmdldExlbmd0aCgpIC0gZS5nZXRMZW5ndGgoKSA8IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciByYXRpbyA9IG1hdGguZ2xvZyh0aGlzLmdldCgwKSkgLSBtYXRoLmdsb2coZS5nZXQoMCkpO1xuICAgIHZhciBudW0gPSBuZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2V0TGVuZ3RoKCk7IGkrKykge1xuICAgICAgbnVtW2ldID0gdGhpcy5nZXQoaSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLmdldExlbmd0aCgpOyBpKyspIHtcbiAgICAgIG51bVtpXSBePSBtYXRoLmdleHAobWF0aC5nbG9nKGUuZ2V0KGkpKSArIHJhdGlvKTtcbiAgICB9IC8vIHJlY3Vyc2l2ZSBjYWxsXG5cblxuICAgIHJldHVybiBuZXcgUVJQb2x5bm9taWFsKG51bSwgMCkubW9kKGUpO1xuICB9XG59O1xudmFyIFBvbHlub21pYWwgPSBRUlBvbHlub21pYWw7XG5cbnZhciBRUk1hc2tQYXR0ZXJuID0ge1xuICBQQVRURVJOMDAwOiAwLFxuICBQQVRURVJOMDAxOiAxLFxuICBQQVRURVJOMDEwOiAyLFxuICBQQVRURVJOMDExOiAzLFxuICBQQVRURVJOMTAwOiA0LFxuICBQQVRURVJOMTAxOiA1LFxuICBQQVRURVJOMTEwOiA2LFxuICBQQVRURVJOMTExOiA3XG59O1xudmFyIFFSVXRpbCA9IHtcbiAgUEFUVEVSTl9QT1NJVElPTl9UQUJMRTogW1tdLCBbNiwgMThdLCBbNiwgMjJdLCBbNiwgMjZdLCBbNiwgMzBdLCBbNiwgMzRdLCBbNiwgMjIsIDM4XSwgWzYsIDI0LCA0Ml0sIFs2LCAyNiwgNDZdLCBbNiwgMjgsIDUwXSwgWzYsIDMwLCA1NF0sIFs2LCAzMiwgNThdLCBbNiwgMzQsIDYyXSwgWzYsIDI2LCA0NiwgNjZdLCBbNiwgMjYsIDQ4LCA3MF0sIFs2LCAyNiwgNTAsIDc0XSwgWzYsIDMwLCA1NCwgNzhdLCBbNiwgMzAsIDU2LCA4Ml0sIFs2LCAzMCwgNTgsIDg2XSwgWzYsIDM0LCA2MiwgOTBdLCBbNiwgMjgsIDUwLCA3MiwgOTRdLCBbNiwgMjYsIDUwLCA3NCwgOThdLCBbNiwgMzAsIDU0LCA3OCwgMTAyXSwgWzYsIDI4LCA1NCwgODAsIDEwNl0sIFs2LCAzMiwgNTgsIDg0LCAxMTBdLCBbNiwgMzAsIDU4LCA4NiwgMTE0XSwgWzYsIDM0LCA2MiwgOTAsIDExOF0sIFs2LCAyNiwgNTAsIDc0LCA5OCwgMTIyXSwgWzYsIDMwLCA1NCwgNzgsIDEwMiwgMTI2XSwgWzYsIDI2LCA1MiwgNzgsIDEwNCwgMTMwXSwgWzYsIDMwLCA1NiwgODIsIDEwOCwgMTM0XSwgWzYsIDM0LCA2MCwgODYsIDExMiwgMTM4XSwgWzYsIDMwLCA1OCwgODYsIDExNCwgMTQyXSwgWzYsIDM0LCA2MiwgOTAsIDExOCwgMTQ2XSwgWzYsIDMwLCA1NCwgNzgsIDEwMiwgMTI2LCAxNTBdLCBbNiwgMjQsIDUwLCA3NiwgMTAyLCAxMjgsIDE1NF0sIFs2LCAyOCwgNTQsIDgwLCAxMDYsIDEzMiwgMTU4XSwgWzYsIDMyLCA1OCwgODQsIDExMCwgMTM2LCAxNjJdLCBbNiwgMjYsIDU0LCA4MiwgMTEwLCAxMzgsIDE2Nl0sIFs2LCAzMCwgNTgsIDg2LCAxMTQsIDE0MiwgMTcwXV0sXG4gIEcxNTogMSA8PCAxMCB8IDEgPDwgOCB8IDEgPDwgNSB8IDEgPDwgNCB8IDEgPDwgMiB8IDEgPDwgMSB8IDEgPDwgMCxcbiAgRzE4OiAxIDw8IDEyIHwgMSA8PCAxMSB8IDEgPDwgMTAgfCAxIDw8IDkgfCAxIDw8IDggfCAxIDw8IDUgfCAxIDw8IDIgfCAxIDw8IDAsXG4gIEcxNV9NQVNLOiAxIDw8IDE0IHwgMSA8PCAxMiB8IDEgPDwgMTAgfCAxIDw8IDQgfCAxIDw8IDEsXG4gIGdldEJDSFR5cGVJbmZvOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBkID0gZGF0YSA8PCAxMDtcblxuICAgIHdoaWxlIChRUlV0aWwuZ2V0QkNIRGlnaXQoZCkgLSBRUlV0aWwuZ2V0QkNIRGlnaXQoUVJVdGlsLkcxNSkgPj0gMCkge1xuICAgICAgZCBePSBRUlV0aWwuRzE1IDw8IFFSVXRpbC5nZXRCQ0hEaWdpdChkKSAtIFFSVXRpbC5nZXRCQ0hEaWdpdChRUlV0aWwuRzE1KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGRhdGEgPDwgMTAgfCBkKSBeIFFSVXRpbC5HMTVfTUFTSztcbiAgfSxcbiAgZ2V0QkNIVHlwZU51bWJlcjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZCA9IGRhdGEgPDwgMTI7XG5cbiAgICB3aGlsZSAoUVJVdGlsLmdldEJDSERpZ2l0KGQpIC0gUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTgpID49IDApIHtcbiAgICAgIGQgXj0gUVJVdGlsLkcxOCA8PCBRUlV0aWwuZ2V0QkNIRGlnaXQoZCkgLSBRUlV0aWwuZ2V0QkNIRGlnaXQoUVJVdGlsLkcxOCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEgPDwgMTIgfCBkO1xuICB9LFxuICBnZXRCQ0hEaWdpdDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZGlnaXQgPSAwO1xuXG4gICAgd2hpbGUgKGRhdGEgIT0gMCkge1xuICAgICAgZGlnaXQrKztcbiAgICAgIGRhdGEgPj4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiBkaWdpdDtcbiAgfSxcbiAgZ2V0UGF0dGVyblBvc2l0aW9uOiBmdW5jdGlvbiAodHlwZU51bWJlcikge1xuICAgIHJldHVybiBRUlV0aWwuUEFUVEVSTl9QT1NJVElPTl9UQUJMRVt0eXBlTnVtYmVyIC0gMV07XG4gIH0sXG4gIGdldE1hc2s6IGZ1bmN0aW9uIChtYXNrUGF0dGVybiwgaSwgaikge1xuICAgIHN3aXRjaCAobWFza1BhdHRlcm4pIHtcbiAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDAwOlxuICAgICAgICByZXR1cm4gKGkgKyBqKSAlIDIgPT0gMDtcblxuICAgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4wMDE6XG4gICAgICAgIHJldHVybiBpICUgMiA9PSAwO1xuXG4gICAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAxMDpcbiAgICAgICAgcmV0dXJuIGogJSAzID09IDA7XG5cbiAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDExOlxuICAgICAgICByZXR1cm4gKGkgKyBqKSAlIDMgPT0gMDtcblxuICAgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4xMDA6XG4gICAgICAgIHJldHVybiAoTWF0aC5mbG9vcihpIC8gMikgKyBNYXRoLmZsb29yKGogLyAzKSkgJSAyID09IDA7XG5cbiAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTAxOlxuICAgICAgICByZXR1cm4gaSAqIGogJSAyICsgaSAqIGogJSAzID09IDA7XG5cbiAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTEwOlxuICAgICAgICByZXR1cm4gKGkgKiBqICUgMiArIGkgKiBqICUgMykgJSAyID09IDA7XG5cbiAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTExOlxuICAgICAgICByZXR1cm4gKGkgKiBqICUgMyArIChpICsgaikgJSAyKSAlIDIgPT0gMDtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIG1hc2tQYXR0ZXJuOlwiICsgbWFza1BhdHRlcm4pO1xuICAgIH1cbiAgfSxcbiAgZ2V0RXJyb3JDb3JyZWN0UG9seW5vbWlhbDogZnVuY3Rpb24gKGVycm9yQ29ycmVjdExlbmd0aCkge1xuICAgIHZhciBhID0gbmV3IFBvbHlub21pYWwoWzFdLCAwKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXJyb3JDb3JyZWN0TGVuZ3RoOyBpKyspIHtcbiAgICAgIGEgPSBhLm11bHRpcGx5KG5ldyBQb2x5bm9taWFsKFsxLCBtYXRoLmdleHAoaSldLCAwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gIGdldExlbmd0aEluQml0czogZnVuY3Rpb24gKG1vZGUkMSwgdHlwZSkge1xuICAgIGlmICgxIDw9IHR5cGUgJiYgdHlwZSA8IDEwKSB7XG4gICAgICAvLyAxIC0gOVxuICAgICAgc3dpdGNoIChtb2RlJDEpIHtcbiAgICAgICAgY2FzZSBtb2RlLk1PREVfTlVNQkVSOlxuICAgICAgICAgIHJldHVybiAxMDtcblxuICAgICAgICBjYXNlIG1vZGUuTU9ERV9BTFBIQV9OVU06XG4gICAgICAgICAgcmV0dXJuIDk7XG5cbiAgICAgICAgY2FzZSBtb2RlLk1PREVfOEJJVF9CWVRFOlxuICAgICAgICAgIHJldHVybiA4O1xuXG4gICAgICAgIGNhc2UgbW9kZS5NT0RFX0tBTkpJOlxuICAgICAgICAgIHJldHVybiA4O1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibW9kZTpcIiArIG1vZGUkMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlIDwgMjcpIHtcbiAgICAgIC8vIDEwIC0gMjZcbiAgICAgIHN3aXRjaCAobW9kZSQxKSB7XG4gICAgICAgIGNhc2UgbW9kZS5NT0RFX05VTUJFUjpcbiAgICAgICAgICByZXR1cm4gMTI7XG5cbiAgICAgICAgY2FzZSBtb2RlLk1PREVfQUxQSEFfTlVNOlxuICAgICAgICAgIHJldHVybiAxMTtcblxuICAgICAgICBjYXNlIG1vZGUuTU9ERV84QklUX0JZVEU6XG4gICAgICAgICAgcmV0dXJuIDE2O1xuXG4gICAgICAgIGNhc2UgbW9kZS5NT0RFX0tBTkpJOlxuICAgICAgICAgIHJldHVybiAxMDtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vZGU6XCIgKyBtb2RlJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA8IDQxKSB7XG4gICAgICAvLyAyNyAtIDQwXG4gICAgICBzd2l0Y2ggKG1vZGUkMSkge1xuICAgICAgICBjYXNlIG1vZGUuTU9ERV9OVU1CRVI6XG4gICAgICAgICAgcmV0dXJuIDE0O1xuXG4gICAgICAgIGNhc2UgbW9kZS5NT0RFX0FMUEhBX05VTTpcbiAgICAgICAgICByZXR1cm4gMTM7XG5cbiAgICAgICAgY2FzZSBtb2RlLk1PREVfOEJJVF9CWVRFOlxuICAgICAgICAgIHJldHVybiAxNjtcblxuICAgICAgICBjYXNlIG1vZGUuTU9ERV9LQU5KSTpcbiAgICAgICAgICByZXR1cm4gMTI7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2RlOlwiICsgbW9kZSQxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZTpcIiArIHR5cGUpO1xuICAgIH1cbiAgfSxcbiAgZ2V0TG9zdFBvaW50OiBmdW5jdGlvbiAocXJDb2RlKSB7XG4gICAgdmFyIG1vZHVsZUNvdW50ID0gcXJDb2RlLmdldE1vZHVsZUNvdW50KCk7XG4gICAgdmFyIGxvc3RQb2ludCA9IDA7IC8vIExFVkVMMVxuXG4gICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQ7IHJvdysrKSB7XG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudDsgY29sKyspIHtcbiAgICAgICAgdmFyIHNhbWVDb3VudCA9IDA7XG4gICAgICAgIHZhciBkYXJrID0gcXJDb2RlLmlzRGFyayhyb3csIGNvbCk7XG5cbiAgICAgICAgZm9yICh2YXIgciA9IC0xOyByIDw9IDE7IHIrKykge1xuICAgICAgICAgIGlmIChyb3cgKyByIDwgMCB8fCBtb2R1bGVDb3VudCA8PSByb3cgKyByKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBjID0gLTE7IGMgPD0gMTsgYysrKSB7XG4gICAgICAgICAgICBpZiAoY29sICsgYyA8IDAgfHwgbW9kdWxlQ291bnQgPD0gY29sICsgYykge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHIgPT0gMCAmJiBjID09IDApIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXJrID09IHFyQ29kZS5pc0Rhcmsocm93ICsgciwgY29sICsgYykpIHtcbiAgICAgICAgICAgICAgc2FtZUNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNhbWVDb3VudCA+IDUpIHtcbiAgICAgICAgICBsb3N0UG9pbnQgKz0gMyArIHNhbWVDb3VudCAtIDU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIExFVkVMMlxuXG5cbiAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudCAtIDE7IHJvdysrKSB7XG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudCAtIDE7IGNvbCsrKSB7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdywgY29sKSkgY291bnQrKztcbiAgICAgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93ICsgMSwgY29sKSkgY291bnQrKztcbiAgICAgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93LCBjb2wgKyAxKSkgY291bnQrKztcbiAgICAgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93ICsgMSwgY29sICsgMSkpIGNvdW50Kys7XG5cbiAgICAgICAgaWYgKGNvdW50ID09IDAgfHwgY291bnQgPT0gNCkge1xuICAgICAgICAgIGxvc3RQb2ludCArPSAzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBMRVZFTDNcblxuXG4gICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQ7IHJvdysrKSB7XG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudCAtIDY7IGNvbCsrKSB7XG4gICAgICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdywgY29sKSAmJiAhcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDEpICYmIHFyQ29kZS5pc0Rhcmsocm93LCBjb2wgKyAyKSAmJiBxckNvZGUuaXNEYXJrKHJvdywgY29sICsgMykgJiYgcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDQpICYmICFxckNvZGUuaXNEYXJrKHJvdywgY29sICsgNSkgJiYgcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDYpKSB7XG4gICAgICAgICAgbG9zdFBvaW50ICs9IDQwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgbW9kdWxlQ291bnQ7IGNvbCsrKSB7XG4gICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudCAtIDY7IHJvdysrKSB7XG4gICAgICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdywgY29sKSAmJiAhcXJDb2RlLmlzRGFyayhyb3cgKyAxLCBjb2wpICYmIHFyQ29kZS5pc0Rhcmsocm93ICsgMiwgY29sKSAmJiBxckNvZGUuaXNEYXJrKHJvdyArIDMsIGNvbCkgJiYgcXJDb2RlLmlzRGFyayhyb3cgKyA0LCBjb2wpICYmICFxckNvZGUuaXNEYXJrKHJvdyArIDUsIGNvbCkgJiYgcXJDb2RlLmlzRGFyayhyb3cgKyA2LCBjb2wpKSB7XG4gICAgICAgICAgbG9zdFBvaW50ICs9IDQwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBMRVZFTDRcblxuXG4gICAgdmFyIGRhcmtDb3VudCA9IDA7XG5cbiAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudDsgY29sKyspIHtcbiAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IG1vZHVsZUNvdW50OyByb3crKykge1xuICAgICAgICBpZiAocXJDb2RlLmlzRGFyayhyb3csIGNvbCkpIHtcbiAgICAgICAgICBkYXJrQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByYXRpbyA9IE1hdGguYWJzKDEwMCAqIGRhcmtDb3VudCAvIG1vZHVsZUNvdW50IC8gbW9kdWxlQ291bnQgLSA1MCkgLyA1O1xuICAgIGxvc3RQb2ludCArPSByYXRpbyAqIDEwO1xuICAgIHJldHVybiBsb3N0UG9pbnQ7XG4gIH1cbn07XG52YXIgdXRpbCA9IFFSVXRpbDtcblxuZnVuY3Rpb24gUVJDb2RlKHR5cGVOdW1iZXIsIGVycm9yQ29ycmVjdExldmVsKSB7XG4gIHRoaXMudHlwZU51bWJlciA9IHR5cGVOdW1iZXI7XG4gIHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwgPSBlcnJvckNvcnJlY3RMZXZlbDtcbiAgdGhpcy5tb2R1bGVzID0gbnVsbDtcbiAgdGhpcy5tb2R1bGVDb3VudCA9IDA7XG4gIHRoaXMuZGF0YUNhY2hlID0gbnVsbDtcbiAgdGhpcy5kYXRhTGlzdCA9IFtdO1xufSAvLyBmb3IgY2xpZW50IHNpZGUgbWluaWZpY2F0aW9uXG5cblxudmFyIHByb3RvID0gUVJDb2RlLnByb3RvdHlwZTtcblxucHJvdG8uYWRkRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBuZXdEYXRhID0gbmV3IF84Qml0Qnl0ZShkYXRhKTtcbiAgdGhpcy5kYXRhTGlzdC5wdXNoKG5ld0RhdGEpO1xuICB0aGlzLmRhdGFDYWNoZSA9IG51bGw7XG59O1xuXG5wcm90by5pc0RhcmsgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgaWYgKHJvdyA8IDAgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSByb3cgfHwgY29sIDwgMCB8fCB0aGlzLm1vZHVsZUNvdW50IDw9IGNvbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihyb3cgKyBcIixcIiArIGNvbCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5tb2R1bGVzW3Jvd11bY29sXTtcbn07XG5cbnByb3RvLmdldE1vZHVsZUNvdW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5tb2R1bGVDb3VudDtcbn07XG5cbnByb3RvLm1ha2UgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIENhbGN1bGF0ZSBhdXRvbWF0aWNhbGx5IHR5cGVOdW1iZXIgaWYgcHJvdmlkZWQgaXMgPCAxXG4gIGlmICh0aGlzLnR5cGVOdW1iZXIgPCAxKSB7XG4gICAgdmFyIHR5cGVOdW1iZXIgPSAxO1xuXG4gICAgZm9yICh0eXBlTnVtYmVyID0gMTsgdHlwZU51bWJlciA8IDQwOyB0eXBlTnVtYmVyKyspIHtcbiAgICAgIHZhciByc0Jsb2NrcyA9IFJTQmxvY2suZ2V0UlNCbG9ja3ModHlwZU51bWJlciwgdGhpcy5lcnJvckNvcnJlY3RMZXZlbCk7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IEJpdEJ1ZmZlcigpO1xuICAgICAgdmFyIHRvdGFsRGF0YUNvdW50ID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByc0Jsb2Nrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b3RhbERhdGFDb3VudCArPSByc0Jsb2Nrc1tpXS5kYXRhQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YUxpc3RbaV07XG4gICAgICAgIGJ1ZmZlci5wdXQoZGF0YS5tb2RlLCA0KTtcbiAgICAgICAgYnVmZmVyLnB1dChkYXRhLmdldExlbmd0aCgpLCB1dGlsLmdldExlbmd0aEluQml0cyhkYXRhLm1vZGUsIHR5cGVOdW1iZXIpKTtcbiAgICAgICAgZGF0YS53cml0ZShidWZmZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpIDw9IHRvdGFsRGF0YUNvdW50ICogOCkgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy50eXBlTnVtYmVyID0gdHlwZU51bWJlcjtcbiAgfVxuXG4gIHRoaXMubWFrZUltcGwoZmFsc2UsIHRoaXMuZ2V0QmVzdE1hc2tQYXR0ZXJuKCkpO1xufTtcblxucHJvdG8ubWFrZUltcGwgPSBmdW5jdGlvbiAodGVzdCwgbWFza1BhdHRlcm4pIHtcbiAgdGhpcy5tb2R1bGVDb3VudCA9IHRoaXMudHlwZU51bWJlciAqIDQgKyAxNztcbiAgdGhpcy5tb2R1bGVzID0gbmV3IEFycmF5KHRoaXMubW9kdWxlQ291bnQpO1xuXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMubW9kdWxlQ291bnQ7IHJvdysrKSB7XG4gICAgdGhpcy5tb2R1bGVzW3Jvd10gPSBuZXcgQXJyYXkodGhpcy5tb2R1bGVDb3VudCk7XG5cbiAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLm1vZHVsZUNvdW50OyBjb2wrKykge1xuICAgICAgdGhpcy5tb2R1bGVzW3Jvd11bY29sXSA9IG51bGw7IC8vKGNvbCArIHJvdykgJSAzO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybigwLCAwKTtcbiAgdGhpcy5zZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuKHRoaXMubW9kdWxlQ291bnQgLSA3LCAwKTtcbiAgdGhpcy5zZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuKDAsIHRoaXMubW9kdWxlQ291bnQgLSA3KTtcbiAgdGhpcy5zZXR1cFBvc2l0aW9uQWRqdXN0UGF0dGVybigpO1xuICB0aGlzLnNldHVwVGltaW5nUGF0dGVybigpO1xuICB0aGlzLnNldHVwVHlwZUluZm8odGVzdCwgbWFza1BhdHRlcm4pO1xuXG4gIGlmICh0aGlzLnR5cGVOdW1iZXIgPj0gNykge1xuICAgIHRoaXMuc2V0dXBUeXBlTnVtYmVyKHRlc3QpO1xuICB9XG5cbiAgaWYgKHRoaXMuZGF0YUNhY2hlID09IG51bGwpIHtcbiAgICB0aGlzLmRhdGFDYWNoZSA9IFFSQ29kZS5jcmVhdGVEYXRhKHRoaXMudHlwZU51bWJlciwgdGhpcy5lcnJvckNvcnJlY3RMZXZlbCwgdGhpcy5kYXRhTGlzdCk7XG4gIH1cblxuICB0aGlzLm1hcERhdGEodGhpcy5kYXRhQ2FjaGUsIG1hc2tQYXR0ZXJuKTtcbn07XG5cbnByb3RvLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4gPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgZm9yICh2YXIgciA9IC0xOyByIDw9IDc7IHIrKykge1xuICAgIGlmIChyb3cgKyByIDw9IC0xIHx8IHRoaXMubW9kdWxlQ291bnQgPD0gcm93ICsgcikgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBjID0gLTE7IGMgPD0gNzsgYysrKSB7XG4gICAgICBpZiAoY29sICsgYyA8PSAtMSB8fCB0aGlzLm1vZHVsZUNvdW50IDw9IGNvbCArIGMpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAoMCA8PSByICYmIHIgPD0gNiAmJiAoYyA9PSAwIHx8IGMgPT0gNikgfHwgMCA8PSBjICYmIGMgPD0gNiAmJiAociA9PSAwIHx8IHIgPT0gNikgfHwgMiA8PSByICYmIHIgPD0gNCAmJiAyIDw9IGMgJiYgYyA8PSA0KSB7XG4gICAgICAgIHRoaXMubW9kdWxlc1tyb3cgKyByXVtjb2wgKyBjXSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vZHVsZXNbcm93ICsgcl1bY29sICsgY10gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnByb3RvLmdldEJlc3RNYXNrUGF0dGVybiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1pbkxvc3RQb2ludCA9IDA7XG4gIHZhciBwYXR0ZXJuID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgIHRoaXMubWFrZUltcGwodHJ1ZSwgaSk7XG4gICAgdmFyIGxvc3RQb2ludCA9IHV0aWwuZ2V0TG9zdFBvaW50KHRoaXMpO1xuXG4gICAgaWYgKGkgPT0gMCB8fCBtaW5Mb3N0UG9pbnQgPiBsb3N0UG9pbnQpIHtcbiAgICAgIG1pbkxvc3RQb2ludCA9IGxvc3RQb2ludDtcbiAgICAgIHBhdHRlcm4gPSBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXR0ZXJuO1xufTtcblxucHJvdG8uY3JlYXRlTW92aWVDbGlwID0gZnVuY3Rpb24gKHRhcmdldF9tYywgaW5zdGFuY2VfbmFtZSwgZGVwdGgpIHtcbiAgdmFyIHFyX21jID0gdGFyZ2V0X21jLmNyZWF0ZUVtcHR5TW92aWVDbGlwKGluc3RhbmNlX25hbWUsIGRlcHRoKTtcbiAgdmFyIGNzID0gMTtcbiAgdGhpcy5tYWtlKCk7XG5cbiAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5tb2R1bGVzLmxlbmd0aDsgcm93KyspIHtcbiAgICB2YXIgeSA9IHJvdyAqIGNzO1xuXG4gICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5tb2R1bGVzW3Jvd10ubGVuZ3RoOyBjb2wrKykge1xuICAgICAgdmFyIHggPSBjb2wgKiBjcztcbiAgICAgIHZhciBkYXJrID0gdGhpcy5tb2R1bGVzW3Jvd11bY29sXTtcblxuICAgICAgaWYgKGRhcmspIHtcbiAgICAgICAgcXJfbWMuYmVnaW5GaWxsKDAsIDEwMCk7XG4gICAgICAgIHFyX21jLm1vdmVUbyh4LCB5KTtcbiAgICAgICAgcXJfbWMubGluZVRvKHggKyBjcywgeSk7XG4gICAgICAgIHFyX21jLmxpbmVUbyh4ICsgY3MsIHkgKyBjcyk7XG4gICAgICAgIHFyX21jLmxpbmVUbyh4LCB5ICsgY3MpO1xuICAgICAgICBxcl9tYy5lbmRGaWxsKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHFyX21jO1xufTtcblxucHJvdG8uc2V0dXBUaW1pbmdQYXR0ZXJuID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciByID0gODsgciA8IHRoaXMubW9kdWxlQ291bnQgLSA4OyByKyspIHtcbiAgICBpZiAodGhpcy5tb2R1bGVzW3JdWzZdICE9IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRoaXMubW9kdWxlc1tyXVs2XSA9IHIgJSAyID09IDA7XG4gIH1cblxuICBmb3IgKHZhciBjID0gODsgYyA8IHRoaXMubW9kdWxlQ291bnQgLSA4OyBjKyspIHtcbiAgICBpZiAodGhpcy5tb2R1bGVzWzZdW2NdICE9IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRoaXMubW9kdWxlc1s2XVtjXSA9IGMgJSAyID09IDA7XG4gIH1cbn07XG5cbnByb3RvLnNldHVwUG9zaXRpb25BZGp1c3RQYXR0ZXJuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcG9zID0gdXRpbC5nZXRQYXR0ZXJuUG9zaXRpb24odGhpcy50eXBlTnVtYmVyKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcG9zLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgcm93ID0gcG9zW2ldO1xuICAgICAgdmFyIGNvbCA9IHBvc1tqXTtcblxuICAgICAgaWYgKHRoaXMubW9kdWxlc1tyb3ddW2NvbF0gIT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgciA9IC0yOyByIDw9IDI7IHIrKykge1xuICAgICAgICBmb3IgKHZhciBjID0gLTI7IGMgPD0gMjsgYysrKSB7XG4gICAgICAgICAgaWYgKHIgPT0gLTIgfHwgciA9PSAyIHx8IGMgPT0gLTIgfHwgYyA9PSAyIHx8IHIgPT0gMCAmJiBjID09IDApIHtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc1tyb3cgKyByXVtjb2wgKyBjXSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc1tyb3cgKyByXVtjb2wgKyBjXSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxucHJvdG8uc2V0dXBUeXBlTnVtYmVyID0gZnVuY3Rpb24gKHRlc3QpIHtcbiAgdmFyIGJpdHMgPSB1dGlsLmdldEJDSFR5cGVOdW1iZXIodGhpcy50eXBlTnVtYmVyKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE4OyBpKyspIHtcbiAgICB2YXIgbW9kID0gIXRlc3QgJiYgKGJpdHMgPj4gaSAmIDEpID09IDE7XG4gICAgdGhpcy5tb2R1bGVzW01hdGguZmxvb3IoaSAvIDMpXVtpICUgMyArIHRoaXMubW9kdWxlQ291bnQgLSA4IC0gM10gPSBtb2Q7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE4OyBpKyspIHtcbiAgICB2YXIgbW9kID0gIXRlc3QgJiYgKGJpdHMgPj4gaSAmIDEpID09IDE7XG4gICAgdGhpcy5tb2R1bGVzW2kgJSAzICsgdGhpcy5tb2R1bGVDb3VudCAtIDggLSAzXVtNYXRoLmZsb29yKGkgLyAzKV0gPSBtb2Q7XG4gIH1cbn07XG5cbnByb3RvLnNldHVwVHlwZUluZm8gPSBmdW5jdGlvbiAodGVzdCwgbWFza1BhdHRlcm4pIHtcbiAgdmFyIGRhdGEgPSB0aGlzLmVycm9yQ29ycmVjdExldmVsIDw8IDMgfCBtYXNrUGF0dGVybjtcbiAgdmFyIGJpdHMgPSB1dGlsLmdldEJDSFR5cGVJbmZvKGRhdGEpOyAvLyB2ZXJ0aWNhbFx0XHRcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE1OyBpKyspIHtcbiAgICB2YXIgbW9kID0gIXRlc3QgJiYgKGJpdHMgPj4gaSAmIDEpID09IDE7XG5cbiAgICBpZiAoaSA8IDYpIHtcbiAgICAgIHRoaXMubW9kdWxlc1tpXVs4XSA9IG1vZDtcbiAgICB9IGVsc2UgaWYgKGkgPCA4KSB7XG4gICAgICB0aGlzLm1vZHVsZXNbaSArIDFdWzhdID0gbW9kO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vZHVsZXNbdGhpcy5tb2R1bGVDb3VudCAtIDE1ICsgaV1bOF0gPSBtb2Q7XG4gICAgfVxuICB9IC8vIGhvcml6b250YWxcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTU7IGkrKykge1xuICAgIHZhciBtb2QgPSAhdGVzdCAmJiAoYml0cyA+PiBpICYgMSkgPT0gMTtcblxuICAgIGlmIChpIDwgOCkge1xuICAgICAgdGhpcy5tb2R1bGVzWzhdW3RoaXMubW9kdWxlQ291bnQgLSBpIC0gMV0gPSBtb2Q7XG4gICAgfSBlbHNlIGlmIChpIDwgOSkge1xuICAgICAgdGhpcy5tb2R1bGVzWzhdWzE1IC0gaSAtIDEgKyAxXSA9IG1vZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb2R1bGVzWzhdWzE1IC0gaSAtIDFdID0gbW9kO1xuICAgIH1cbiAgfSAvLyBmaXhlZCBtb2R1bGVcblxuXG4gIHRoaXMubW9kdWxlc1t0aGlzLm1vZHVsZUNvdW50IC0gOF1bOF0gPSAhdGVzdDtcbn07XG5cbnByb3RvLm1hcERhdGEgPSBmdW5jdGlvbiAoZGF0YSwgbWFza1BhdHRlcm4pIHtcbiAgdmFyIGluYyA9IC0xO1xuICB2YXIgcm93ID0gdGhpcy5tb2R1bGVDb3VudCAtIDE7XG4gIHZhciBiaXRJbmRleCA9IDc7XG4gIHZhciBieXRlSW5kZXggPSAwO1xuXG4gIGZvciAodmFyIGNvbCA9IHRoaXMubW9kdWxlQ291bnQgLSAxOyBjb2wgPiAwOyBjb2wgLT0gMikge1xuICAgIGlmIChjb2wgPT0gNikgY29sLS07XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCAyOyBjKyspIHtcbiAgICAgICAgaWYgKHRoaXMubW9kdWxlc1tyb3ddW2NvbCAtIGNdID09IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGFyayA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGJ5dGVJbmRleCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBkYXJrID0gKGRhdGFbYnl0ZUluZGV4XSA+Pj4gYml0SW5kZXggJiAxKSA9PSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXNrID0gdXRpbC5nZXRNYXNrKG1hc2tQYXR0ZXJuLCByb3csIGNvbCAtIGMpO1xuXG4gICAgICAgICAgaWYgKG1hc2spIHtcbiAgICAgICAgICAgIGRhcmsgPSAhZGFyaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm1vZHVsZXNbcm93XVtjb2wgLSBjXSA9IGRhcms7XG4gICAgICAgICAgYml0SW5kZXgtLTtcblxuICAgICAgICAgIGlmIChiaXRJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgYnl0ZUluZGV4Kys7XG4gICAgICAgICAgICBiaXRJbmRleCA9IDc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJvdyArPSBpbmM7XG5cbiAgICAgIGlmIChyb3cgPCAwIHx8IHRoaXMubW9kdWxlQ291bnQgPD0gcm93KSB7XG4gICAgICAgIHJvdyAtPSBpbmM7XG4gICAgICAgIGluYyA9IC1pbmM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuUVJDb2RlLlBBRDAgPSAweEVDO1xuUVJDb2RlLlBBRDEgPSAweDExO1xuXG5RUkNvZGUuY3JlYXRlRGF0YSA9IGZ1bmN0aW9uICh0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCwgZGF0YUxpc3QpIHtcbiAgdmFyIHJzQmxvY2tzID0gUlNCbG9jay5nZXRSU0Jsb2Nrcyh0eXBlTnVtYmVyLCBlcnJvckNvcnJlY3RMZXZlbCk7XG4gIHZhciBidWZmZXIgPSBuZXcgQml0QnVmZmVyKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkYXRhID0gZGF0YUxpc3RbaV07XG4gICAgYnVmZmVyLnB1dChkYXRhLm1vZGUsIDQpO1xuICAgIGJ1ZmZlci5wdXQoZGF0YS5nZXRMZW5ndGgoKSwgdXRpbC5nZXRMZW5ndGhJbkJpdHMoZGF0YS5tb2RlLCB0eXBlTnVtYmVyKSk7XG4gICAgZGF0YS53cml0ZShidWZmZXIpO1xuICB9IC8vIGNhbGMgbnVtIG1heCBkYXRhLlxuXG5cbiAgdmFyIHRvdGFsRGF0YUNvdW50ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJzQmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgdG90YWxEYXRhQ291bnQgKz0gcnNCbG9ja3NbaV0uZGF0YUNvdW50O1xuICB9XG5cbiAgaWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSA+IHRvdGFsRGF0YUNvdW50ICogOCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvZGUgbGVuZ3RoIG92ZXJmbG93LiAoXCIgKyBidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgKyBcIj5cIiArIHRvdGFsRGF0YUNvdW50ICogOCArIFwiKVwiKTtcbiAgfSAvLyBlbmQgY29kZVxuXG5cbiAgaWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSArIDQgPD0gdG90YWxEYXRhQ291bnQgKiA4KSB7XG4gICAgYnVmZmVyLnB1dCgwLCA0KTtcbiAgfSAvLyBwYWRkaW5nXG5cblxuICB3aGlsZSAoYnVmZmVyLmdldExlbmd0aEluQml0cygpICUgOCAhPSAwKSB7XG4gICAgYnVmZmVyLnB1dEJpdChmYWxzZSk7XG4gIH0gLy8gcGFkZGluZ1xuXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpID49IHRvdGFsRGF0YUNvdW50ICogOCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYnVmZmVyLnB1dChRUkNvZGUuUEFEMCwgOCk7XG5cbiAgICBpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpID49IHRvdGFsRGF0YUNvdW50ICogOCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYnVmZmVyLnB1dChRUkNvZGUuUEFEMSwgOCk7XG4gIH1cblxuICByZXR1cm4gUVJDb2RlLmNyZWF0ZUJ5dGVzKGJ1ZmZlciwgcnNCbG9ja3MpO1xufTtcblxuUVJDb2RlLmNyZWF0ZUJ5dGVzID0gZnVuY3Rpb24gKGJ1ZmZlciwgcnNCbG9ja3MpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBtYXhEY0NvdW50ID0gMDtcbiAgdmFyIG1heEVjQ291bnQgPSAwO1xuICB2YXIgZGNkYXRhID0gbmV3IEFycmF5KHJzQmxvY2tzLmxlbmd0aCk7XG4gIHZhciBlY2RhdGEgPSBuZXcgQXJyYXkocnNCbG9ja3MubGVuZ3RoKTtcblxuICBmb3IgKHZhciByID0gMDsgciA8IHJzQmxvY2tzLmxlbmd0aDsgcisrKSB7XG4gICAgdmFyIGRjQ291bnQgPSByc0Jsb2Nrc1tyXS5kYXRhQ291bnQ7XG4gICAgdmFyIGVjQ291bnQgPSByc0Jsb2Nrc1tyXS50b3RhbENvdW50IC0gZGNDb3VudDtcbiAgICBtYXhEY0NvdW50ID0gTWF0aC5tYXgobWF4RGNDb3VudCwgZGNDb3VudCk7XG4gICAgbWF4RWNDb3VudCA9IE1hdGgubWF4KG1heEVjQ291bnQsIGVjQ291bnQpO1xuICAgIGRjZGF0YVtyXSA9IG5ldyBBcnJheShkY0NvdW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGNkYXRhW3JdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkY2RhdGFbcl1baV0gPSAweGZmICYgYnVmZmVyLmJ1ZmZlcltpICsgb2Zmc2V0XTtcbiAgICB9XG5cbiAgICBvZmZzZXQgKz0gZGNDb3VudDtcbiAgICB2YXIgcnNQb2x5ID0gdXRpbC5nZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsKGVjQ291bnQpO1xuICAgIHZhciByYXdQb2x5ID0gbmV3IFBvbHlub21pYWwoZGNkYXRhW3JdLCByc1BvbHkuZ2V0TGVuZ3RoKCkgLSAxKTtcbiAgICB2YXIgbW9kUG9seSA9IHJhd1BvbHkubW9kKHJzUG9seSk7XG4gICAgZWNkYXRhW3JdID0gbmV3IEFycmF5KHJzUG9seS5nZXRMZW5ndGgoKSAtIDEpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlY2RhdGFbcl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtb2RJbmRleCA9IGkgKyBtb2RQb2x5LmdldExlbmd0aCgpIC0gZWNkYXRhW3JdLmxlbmd0aDtcbiAgICAgIGVjZGF0YVtyXVtpXSA9IG1vZEluZGV4ID49IDAgPyBtb2RQb2x5LmdldChtb2RJbmRleCkgOiAwO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0b3RhbENvZGVDb3VudCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByc0Jsb2Nrcy5sZW5ndGg7IGkrKykge1xuICAgIHRvdGFsQ29kZUNvdW50ICs9IHJzQmxvY2tzW2ldLnRvdGFsQ291bnQ7XG4gIH1cblxuICB2YXIgZGF0YSA9IG5ldyBBcnJheSh0b3RhbENvZGVDb3VudCk7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhEY0NvdW50OyBpKyspIHtcbiAgICBmb3IgKHZhciByID0gMDsgciA8IHJzQmxvY2tzLmxlbmd0aDsgcisrKSB7XG4gICAgICBpZiAoaSA8IGRjZGF0YVtyXS5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpbmRleCsrXSA9IGRjZGF0YVtyXVtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1heEVjQ291bnQ7IGkrKykge1xuICAgIGZvciAodmFyIHIgPSAwOyByIDwgcnNCbG9ja3MubGVuZ3RoOyByKyspIHtcbiAgICAgIGlmIChpIDwgZWNkYXRhW3JdLmxlbmd0aCkge1xuICAgICAgICBkYXRhW2luZGV4KytdID0gZWNkYXRhW3JdW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufTtcblxudmFyIFFSQ29kZV8xID0gUVJDb2RlO1xuXG4vKipcbiAqIEVuY29kZSBVVEYxNiB0byBVVEY4LlxuICogU2VlOiBodHRwOi8vam9uaXNhbG9uZW4uY29tLzIwMTIvZnJvbS11dGYtMTYtdG8tdXRmLTgtaW4tamF2YXNjcmlwdC9cbiAqIEBwYXJhbSBzdHIge3N0cmluZ31cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gdG9VVEY4U3RyaW5nKHN0cikge1xuICB2YXIgdXRmOFN0ciA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBpZiAoY2hhckNvZGUgPCAweDAwODApIHtcbiAgICAgIHV0ZjhTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgfSBlbHNlIGlmIChjaGFyQ29kZSA8IDB4MDgwMCkge1xuICAgICAgdXRmOFN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4YzAgfCBjaGFyQ29kZSA+PiA2KTtcbiAgICAgIHV0ZjhTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhckNvZGUgJiAweDNmKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJDb2RlIDwgMHhkODAwIHx8IGNoYXJDb2RlID49IDB4ZTAwMCkge1xuICAgICAgdXRmOFN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZTAgfCBjaGFyQ29kZSA+PiAxMik7XG4gICAgICB1dGY4U3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJDb2RlID4+IDYgJiAweDNmKTtcbiAgICAgIHV0ZjhTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhckNvZGUgJiAweDNmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3Vycm9nYXRlIHBhaXJcbiAgICAgIGkrKzsgLy8gVVRGLTE2IGVuY29kZXMgMHgxMDAwMC0weDEwRkZGRiBieVxuICAgICAgLy8gc3VidHJhY3RpbmcgMHgxMDAwMCBhbmQgc3BsaXR0aW5nIHRoZVxuICAgICAgLy8gMjAgYml0cyBvZiAweDAtMHhGRkZGRiBpbnRvIHR3byBoYWx2ZXNcblxuICAgICAgY2hhckNvZGUgPSAweDEwMDAwICsgKChjaGFyQ29kZSAmIDB4M2ZmKSA8PCAxMCB8IHN0ci5jaGFyQ29kZUF0KGkpICYgMHgzZmYpO1xuICAgICAgdXRmOFN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZjAgfCBjaGFyQ29kZSA+PiAxOCk7XG4gICAgICB1dGY4U3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJDb2RlID4+IDEyICYgMHgzZik7XG4gICAgICB1dGY4U3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJDb2RlID4+IDYgJiAweDNmKTtcbiAgICAgIHV0ZjhTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhckNvZGUgJiAweDNmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdXRmOFN0cjtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG1vZHVsZXMpIHtcbiAgdmFyIG1hcmdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG9wcyA9IFtdO1xuICBtb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdywgeSkge1xuICAgIHZhciBzdGFydCA9IG51bGw7XG4gICAgcm93LmZvckVhY2goZnVuY3Rpb24gKGNlbGwsIHgpIHtcbiAgICAgIGlmICghY2VsbCAmJiBzdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAvLyBNMCAwaDd2MUgweiBpbmplY3RzIHRoZSBzcGFjZSB3aXRoIHRoZSBtb3ZlIGFuZCBkcm9wcyB0aGUgY29tbWEsXG4gICAgICAgIC8vIHNhdmluZyBhIGNoYXIgcGVyIG9wZXJhdGlvblxuICAgICAgICBvcHMucHVzaChcIk1cIi5jb25jYXQoc3RhcnQgKyBtYXJnaW4sIFwiIFwiKS5jb25jYXQoeSArIG1hcmdpbiwgXCJoXCIpLmNvbmNhdCh4IC0gc3RhcnQsIFwidjFIXCIpLmNvbmNhdChzdGFydCArIG1hcmdpbiwgXCJ6XCIpKTtcbiAgICAgICAgc3RhcnQgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGVuZCBvZiByb3csIGNsZWFuIHVwIG9yIHNraXBcblxuXG4gICAgICBpZiAoeCA9PT0gcm93Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgaWYgKCFjZWxsKSB7XG4gICAgICAgICAgLy8gV2Ugd291bGQgaGF2ZSBjbG9zZWQgdGhlIG9wIGFib3ZlIGFscmVhZHkgc28gdGhpcyBjYW4gb25seSBtZWFuXG4gICAgICAgICAgLy8gMisgbGlnaHQgbW9kdWxlcyBpbiBhIHJvdy5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBKdXN0IGEgc2luZ2xlIGRhcmsgbW9kdWxlLlxuICAgICAgICAgIG9wcy5wdXNoKFwiTVwiLmNvbmNhdCh4ICsgbWFyZ2luLCBcIixcIikuY29uY2F0KHkgKyBtYXJnaW4sIFwiIGgxdjFIXCIpLmNvbmNhdCh4ICsgbWFyZ2luLCBcInpcIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBmaW5pc2ggdGhlIGN1cnJlbnQgbGluZS5cbiAgICAgICAgICBvcHMucHVzaChcIk1cIi5jb25jYXQoc3RhcnQgKyBtYXJnaW4sIFwiLFwiKS5jb25jYXQoeSArIG1hcmdpbiwgXCIgaFwiKS5jb25jYXQoeCArIDEgLSBzdGFydCwgXCJ2MUhcIikuY29uY2F0KHN0YXJ0ICsgbWFyZ2luLCBcInpcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2VsbCAmJiBzdGFydCA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydCA9IHg7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb3BzLmpvaW4oJycpO1xufSAvLyBAdnVlL2NvbXBvbmVudFxuXG5cbnZhciBRcmNvZGVWdWUgPSB7XG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIGNsYXNzTmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIHNpemU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAxMDAsXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcihzKSB7XG4gICAgICAgIHJldHVybiBpc05hTihOdW1iZXIocykpICE9PSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGV2ZWw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdMJyxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKGwpIHtcbiAgICAgICAgcmV0dXJuIFsnTCcsICdRJywgJ00nLCAnSCddLmluZGV4T2YobCkgPiAtMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGJhY2tncm91bmQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjZmZmJ1xuICAgIH0sXG4gICAgZm9yZWdyb3VuZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJyMwMDAnXG4gICAgfSxcbiAgICByZW5kZXJBczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogJ2NhbnZhcycsXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcihhcykge1xuICAgICAgICByZXR1cm4gWydjYW52YXMnLCAnc3ZnJ10uaW5kZXhPZihhcykgPiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG51bUNlbGxzOiAwLFxuICAgICAgZmdQYXRoOiAnJ1xuICAgIH07XG4gIH0sXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQoKSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgIHNpemUgPSB0aGlzLnNpemUsXG4gICAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsLFxuICAgICAgICAgIGJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQsXG4gICAgICAgICAgZm9yZWdyb3VuZCA9IHRoaXMuZm9yZWdyb3VuZCxcbiAgICAgICAgICByZW5kZXJBcyA9IHRoaXMucmVuZGVyQXM7XG5cbiAgICAgIHZhciBfc2l6ZSA9IHNpemUgPj4+IDA7IC8vIHNpemUgdG8gbnVtYmVyXG4gICAgICAvLyBXZSdsbCB1c2UgdHlwZT09PS0xIHRvIGZvcmNlIFFSQ29kZSB0byBhdXRvbWF0aWNhbGx5IHBpY2sgdGhlIGJlc3QgdHlwZVxuXG5cbiAgICAgIHZhciBxckNvZGUgPSBuZXcgUVJDb2RlXzEoLTEsIEVycm9yQ29ycmVjdExldmVsW2xldmVsXSk7XG4gICAgICBxckNvZGUuYWRkRGF0YSh0b1VURjhTdHJpbmcodmFsdWUpKTtcbiAgICAgIHFyQ29kZS5tYWtlKCk7XG4gICAgICB2YXIgY2VsbHMgPSBxckNvZGUubW9kdWxlcztcbiAgICAgIHZhciB0aWxlVyA9IF9zaXplIC8gY2VsbHMubGVuZ3RoO1xuICAgICAgdmFyIHRpbGVIID0gX3NpemUgLyBjZWxscy5sZW5ndGg7XG4gICAgICB2YXIgc2NhbGUgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgICBpZiAocmVuZGVyQXMgPT09ICdzdmcnKSB7XG4gICAgICAgIHRoaXMubnVtQ2VsbHMgPSBjZWxscy5sZW5ndGg7IC8vIERyYXdpbmcgc3RyYXRlZ3k6IGluc3RlYWQgb2YgYSByZWN0IHBlciBtb2R1bGUsIHdlJ3JlIGdvaW5nIHRvIGNyZWF0ZSBhXG4gICAgICAgIC8vIHNpbmdsZSBwYXRoIGZvciB0aGUgZGFyayBtb2R1bGVzIGFuZCBsYXllciB0aGF0IG9uIHRvcCBvZiBhIGxpZ2h0IHJlY3QsXG4gICAgICAgIC8vIGZvciBhIHRvdGFsIG9mIDIgRE9NIG5vZGVzLiBXZSBwYXkgYSBiaXQgbW9yZSBpbiBzdHJpbmcgY29uY2F0IGJ1dCB0aGF0J3NcbiAgICAgICAgLy8gd2F5IGZhc3RlciB0aGFuIERPTSBvcHMuXG4gICAgICAgIC8vIEZvciBsZXZlbCAxLCA0NDEgbm9kZXMgLT4gMlxuICAgICAgICAvLyBGb3IgbGV2ZWwgNDAsIDMxMzI5IC0+IDJcblxuICAgICAgICB0aGlzLmZnUGF0aCA9IGdlbmVyYXRlUGF0aChjZWxscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy4kcmVmc1sncXJjb2RlLXZ1ZSddO1xuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggPSBfc2l6ZSAqIHNjYWxlO1xuICAgICAgICBjdHguc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaChmdW5jdGlvbiAocm93LCByZHgpIHtcbiAgICAgICAgICByb3cuZm9yRWFjaChmdW5jdGlvbiAoY2VsbCwgY2R4KSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY2VsbCA/IGZvcmVncm91bmQgOiBiYWNrZ3JvdW5kO1xuICAgICAgICAgICAgdmFyIHcgPSBNYXRoLmNlaWwoKGNkeCArIDEpICogdGlsZVcpIC0gTWF0aC5mbG9vcihjZHggKiB0aWxlVyk7XG4gICAgICAgICAgICB2YXIgaCA9IE1hdGguY2VpbCgocmR4ICsgMSkgKiB0aWxlSCkgLSBNYXRoLmZsb29yKHJkeCAqIHRpbGVIKTtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChNYXRoLnJvdW5kKGNkeCAqIHRpbGVXKSwgTWF0aC5yb3VuZChyZHggKiB0aWxlSCksIHcsIGgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUsXG4gICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZSxcbiAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsLFxuICAgICAgICBiYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLFxuICAgICAgICBmb3JlZ3JvdW5kID0gdGhpcy5mb3JlZ3JvdW5kLFxuICAgICAgICBzaXplID0gdGhpcy5zaXplLFxuICAgICAgICByZW5kZXJBcyA9IHRoaXMucmVuZGVyQXMsXG4gICAgICAgIG51bUNlbGxzID0gdGhpcy5udW1DZWxscyxcbiAgICAgICAgZmdQYXRoID0gdGhpcy5mZ1BhdGg7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiB0aGlzLmNsYXNzIHx8IGNsYXNzTmFtZSxcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kLFxuICAgICAgICBmb3JlZ3JvdW5kOiBmb3JlZ3JvdW5kXG4gICAgICB9XG4gICAgfSwgW3JlbmRlckFzID09PSAnc3ZnJyA/IGNyZWF0ZUVsZW1lbnQoJ3N2ZycsIHtcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIHNoYXBlUmVuZGVyaW5nOiAnY3Jpc3BFZGdlcycsXG4gICAgICAgIHZpZXdCb3g6IFwiMCAwIFwiLmNvbmNhdChudW1DZWxscywgXCIgXCIpLmNvbmNhdChudW1DZWxscylcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogc2l6ZSArICdweCcsXG4gICAgICAgIGhlaWdodDogc2l6ZSArICdweCdcbiAgICAgIH1cbiAgICB9LCBbY3JlYXRlRWxlbWVudCgncGF0aCcsIHtcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIGZpbGw6IGJhY2tncm91bmQsXG4gICAgICAgIGQ6IFwiTTAsMCBoXCIuY29uY2F0KG51bUNlbGxzLCBcInZcIikuY29uY2F0KG51bUNlbGxzLCBcIkgwelwiKVxuICAgICAgfVxuICAgIH0pLCBjcmVhdGVFbGVtZW50KCdwYXRoJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgZmlsbDogZm9yZWdyb3VuZCxcbiAgICAgICAgZDogZmdQYXRoXG4gICAgICB9XG4gICAgfSldKSA6IGNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycsIHtcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgd2lkdGg6IHNpemVcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogc2l6ZSArICdweCcsXG4gICAgICAgIGhlaWdodDogc2l6ZSArICdweCdcbiAgICAgIH0sXG4gICAgICByZWY6ICdxcmNvZGUtdnVlJ1xuICAgIH0sIFtdKV0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBRcmNvZGVWdWU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/qrcode.vue/dist/qrcode.vue.esm.js\n");

/***/ })

}]);